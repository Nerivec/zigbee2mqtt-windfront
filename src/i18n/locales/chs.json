{
    "common": {
        "action": "操作",
        "actions": "操作",
        "apply": "应用",
        "attribute": "属性",
        "bind": "绑定",
        "clear": "清除",
        "clear_all": "全部清除",
        "close": "关闭",
        "cancel": "取消",
        "cluster": "集群",
        "clusters": "集群",
        "confirmation": "确认提示",
        "delete": "删除",
        "destination": "目标",
        "devices": "设备",
        "dialog_confirmation_prompt": "您确定吗？",
        "disable": "禁用",
        "search": "搜索",
        "highlight": "高亮",
        "groups": "群组",
        "loading": "加载中...",
        "none": "无",
        "ok": "确定",
        "read": "读取",
        "save": "保存",
        "select_value": "选择值",
        "select_device": "选择设备",
        "select_endpoint": "选择端点",
        "select_group": "选择群组",
        "source_endpoint": "源端点",
        "the_only_endpoint": "唯一端点",
        "unbind": "解除绑定",
        "write": "写入",
        "destination_endpoint": "目标端点",
        "read_the_docs_info": "在文档中了解更多…",
        "page": "页面",
        "go_to_page": "转到页面",
        "show": "显示",
        "min": "最小",
        "max": "最大",
        "done": "完成",
        "enter_auth_token": "输入认证令牌",
        "token": "Token",
        "documentation": "文档",
        "optional": "可选",
        "init": "初始化",
        "undefined": "未定义",
        "type_to_filter": "输入以过滤...",
        "name": "名称",
        "friendly_name": "友好名称",
        "unknown_device": "未知设备",
        "unknown_group": "未知组",
        "failed": "失败",
        "disabled": "已禁用",
        "hide_disabled": "隐藏已禁用",
        "battery_low_only": "仅电量低",
        "available_only": "仅可用",
        "execute": "执行",
        "command": "命令",
        "payload": "Payload",
        "execute_command": "执行命令",
        "send": "发送",
        "columns": "列",
        "entries": "条目",
        "source": "来源",
        "close_notifications": "关闭通知",
        "more": "更多",
        "default": "默认",
        "multi_instance": "多实例",
        "all_sources": "所有来源",
        "show_source_name": "显示来源名称",
        "show_only": "仅显示",
        "empty_exposes_definition": "空暴露定义",
        "all_features": "所有功能",
        "all_properties": "所有属性",
        "show_routers": "显示路由器",
        "show_end_devices": "显示终端设备"
    },
    "devicePage": {
        "about": "关于",
        "bind": "绑定",
        "clusters": "集群",
        "dev_console": "开发控制台",
        "reporting": "报告",
        "settings": "设置",
        "settings_specific": "设置（特定）",
        "state": "状态",
        "groups": "群组",
        "scene": "场景",
        "exposes": "暴露",
        "select_a_device": "选择设备"
    },
    "groups": {
        "settings": "设置",
        "add_to_group_header": "Add a device to the group",
        "add_to_group": "Add to group",
        "create_group": "Create group",
        "friendly_name_placeholder": "bedroom_lights, garden...",
        "remove_group": "Remove group",
        "group_id": "Group ID",
        "group_members": "Group members",
        "group_scenes": "Group scenes",
        "scenes": "Scenes",
        "rename_group": "Rename group",
        "remove_from_group": "Remove from group"
    },
    "logs": {
        "log_level_config": "Log level config",
        "empty_logs_message": "无内容显示",
        "filter_by_text": "Filter by text",
        "logs_limit": "Logs limit",
        "highlight_only": "Highlight only"
    },
    "network": {
        "network_hierarchy": "Network hierarchy",
        "help": "帮助",
        "load": "Load",
        "reload": "Reload",
        "loading": "Depending on the size of the network and the quality of its links, this can take a while.",
        "parent": "Parent",
        "child": "Child",
        "sibling": "Sibling",
        "children": "Children",
        "siblings": "Siblings",
        "previous_children": "Previous children",
        "nodes": "Nodes",
        "edges": "Edges",
        "legend": "Legend",
        "depth": "Depth",
        "routes": "Routes",
        "type": "Type",
        "raw": "Display data/map",
        "graphviz": "External - Graphviz",
        "plantuml": "External - PlantUML",
        "enable_routes": "Enable routes",
        "display_type": "Display type",
        "data": "Data",
        "map": "Map",
        "layout_type": "Layout type",
        "label_type": "Label type",
        "download_image": "Download as image",
        "zoom_in": "Zoom in",
        "zoom_out": "Zoom out",
        "fit_view": "Fit view",
        "reset_controls": "Reset controls",
        "find_node": "Find node",
        "scroll_to_top": "Scroll to top",
        "node_strength": "Node strength",
        "link_distance": "Link distance",
        "icons": "Icons",
        "show_icons": "Show icons",
        "copy_paste_on": "Copy and paste the following data in one of the available online viewers/editors.",
        "highlight_info": "Click on a device's image to highlight it automatically.",
        "legend_node_siblings": "Only highest-rated siblings are shown, which should roughly match the actual connections of the network.",
        "legend_node_size": "Nodes are sized by centrality.",
        "legend_node_select": "Selecting a node will select the depending one-hop part of the network.",
        "legend_node_fold": "Node context menu fold/expand button will affect the depending part of the network.",
        "legend_edge_toggle": "Toggling relationship edges will change the layout. When disabling one or more, the actual layout of the network is no longer accurately represented.",
        "begin_info_type": "The type is used to retrieve a different network map format. External ones are meant to be copied for use outside of the frontend (some example websites are given once generated).",
        "begin_info_routes": "Enabling routes will retrieve the routes table from devices (not all coordinators/devices support this, but failures should not prevent the rest of the data from loading). This is currently only used in the 'data' display.",
        "begin_info_display": "The display type allows to switch between a data-oriented view and a map view."
    },
    "navbar": {
        "all": "全部",
        "dashboard": "仪表板",
        "devices": "设备",
        "disable_join": "禁用加入",
        "extensions": "Extensions",
        "groups": "群组",
        "logs": "日志",
        "network": "网络",
        "ota": "OTA",
        "permit_join": "允许加入",
        "restart": "重启",
        "settings": "设置",
        "toggle_dropdown": "切换下拉菜单",
        "touchlink": "Touchlink",
        "websocket_status": "WebSocket status",
        "transaction_prefix": "事务前缀"
    },
    "ota": {
        "check": "Check for new updates",
        "check_selected": "Check selected",
        "update_selected": "Update selected",
        "update_selected_info": "An OTA update is very taxing for a network. Make sure it is stable and opt for less used times.",
        "empty_ota_message": "No device currently support OTA",
        "remaining_time": "Remaining time",
        "schedule": "Schedule update",
        "schedule_info": "Will update on next OTA request from device",
        "unschedule": "Cancel scheduled update",
        "update": "Update device firmware",
        "firmware_version": "Firmware version",
        "available_firmware_version": "Available firmware version",
        "app": "App",
        "stack": "Stack"
    },
    "settings": {
        "about": "关于",
        "advanced": "Advanced",
        "availability": "Availability",
        "blocklist": "Blocklist",
        "revision": "Revision",
        "coordinator": "Coordinator",
        "donate": "Donate",
        "donation_text": "Here you can thank us for all the hard work. Don't hesitate to say something nice as well ;)",
        "download_state": "Download state",
        "experimental": "Experimental",
        "external_converters": "External converters",
        "frontend": "Frontend",
        "frontend_version": "Frontend version",
        "main": "Main",
        "mqtt": "MQTT",
        "ota": "OTA updates",
        "passlist": "Passlist",
        "bridge": "Bridge",
        "restart_zigbee2mqtt": "Restart Zigbee2MQTT",
        "serial": "Serial",
        "settings": "设置",
        "tools": "Tools",
        "zigbee2mqtt_version": "Zigbee2MQTT version",
        "translate": "Translate",
        "stats": "Stats",
        "coordinator_ieee_address": "Coordinator IEEE Address",
        "request_z2m_backup": "Request Z2m backup",
        "add_install_code": "Add install code",
        "install_code": "Install code",
        "homeassistant": "Home Assistant integration",
        "translation_prompt": "You can help with the translation at",
        "zigbee_herdsman_converters_version": "zigbee-herdsman-converters version",
        "zigbee_herdsman_version": "zigbee-herdsman version",
        "localise_images": "Localise device images",
        "frontend_notice": "These settings are stored locally in your browser. Using private windows or clearing the cache will reset them to defaults.",
        "reset_settings": "Reset settings",
        "reset_auth": "Reset auth",
        "reset_all": "Reset all",
        "language": "Language",
        "theme": "Theme",
        "homepage": "Homepage",
        "dashboard_column_display": "Dashboard column display",
        "permit_join_time": "Permit join time",
        "dev_console": "开发控制台",
        "max_on_screen_notifications": "Max on-screen notifications",
        "network_raw": "Network data/map",
        "network_map": "Network map",
        "machine": "Machine",
        "node_version": "Node version",
        "version": "Version",
        "health": "Health"
    },
    "health": {
        "awaiting_next_check": "Awaiting next check",
        "last_check": "Last check",
        "response_time": "Response time",
        "os": "OS",
        "process": "Process",
        "load_average": "Load average",
        "ram_usage": "RAM usage",
        "uptime": "Uptime",
        "queued": "Queued",
        "published": "Published",
        "received": "Received",
        "messages": "Messages",
        "messages_per_sec": "Messages per sec",
        "leave_count": "Leave count",
        "network_address_changes": "Network address changes",
        "very_low": "Very low",
        "interview_info": "Device interviews can heavily influence this data."
    },
    "touchlink": {
        "detected_devices_message": "Detected {{count}} touchlink devices.",
        "rescan": "Scan again",
        "scan": "Scan",
        "identify": "Identify",
        "factory_reset": "Factory reset",
        "scan_source": "Scan source",
        "select_scan_source": "Select scan source"
    },
    "values": {
        "clear": "清除",
        "closed": "Closed",
        "false": "False",
        "not_supported": "Not supported",
        "occupied": "Occupied",
        "open": "Open",
        "supported": "Supported",
        "true": "True",
        "empty_string": "Empty string(\"\")",
        "leaking": "Leaking",
        "tampered": "Tampered",
        "null": "Null",
        "Clear": "清除",
        "Closed": "Closed",
        "Occupied": "Occupied",
        "Open": "Open"
    },
    "zigbee": {
        "actions": "操作",
        "attribute": "属性",
        "unknown": "未知",
        "mains_single_phase": "Mains (single phase)",
        "mains_3_phase": "Mains (3 phase)",
        "battery": "电池",
        "dc_source": "DC Source",
        "emergency_mains_constantly_powered": "Emergency mains constantly powered",
        "emergency_mains_and_transfer_switch": "Emergency mains and transfer switch",
        "block_join": "Block from joining again",
        "cluster": "集群",
        "description": "Description",
        "device_type": "Device type",
        "endpoint": "Endpoint",
        "firmware_id": "Firmware ID",
        "firmware_build_date": "Firmware build date",
        "force_remove": "Force remove",
        "force_remove_notice": "Use only as last resort (will not propagate to the network)",
        "ieee_address": "IEEE Address",
        "interview": "Interview",
        "interview_failed": "Interview failed",
        "interviewing": "Interviewing",
        "interview_state": "Interview state",
        "last_seen": "Last seen",
        "lqi": "LQI",
        "manufacturer": "Manufacturer",
        "max_rep_interval": "Max rep interval",
        "min_rep_change": "Min rep change",
        "min_rep_interval": "Min rep interval",
        "model": "Model",
        "network_address": "Network address",
        "network_address_hex": "Network address in hexadecimal format",
        "network_address_dec": "Network address in decimal format",
        "none": "无",
        "pic": "Pic",
        "power": "Power",
        "power_level": "power level",
        "reconfigure": "Reconfigure",
        "remove_device": "Remove device",
        "rename_device": "Rename device",
        "select_attribute": "Select attribute",
        "select_cluster": "Select cluster",
        "support_status": "Support status",
        "unsupported": "Unsupported",
        "updating_firmware": "Updating firmware",
        "update_Home_assistant_entity_id": "Update Home Assistant entity ID",
        "zigbee_manufacturer": "ZigBee Manufacturer",
        "zigbee_model": "ZigBee Model",
        "device": "Device",
        "channel": "Channel",
        "possible": "Possible",
        "available": "可用",
        "edit_description": "Edit description",
        "save_description": "Save description",
        "update_description": "Update description",
        "read_write_attributes": "Read / Write attributes from endpoint cluster",
        "input_clusters": "Input clusters",
        "output_clusters": "Output clusters",
        "custom_clusters": "Custom clusters",
        "other_zcl_clusters": "Other ZCL clusters",
        "how_to_add_support": "How to add support?",
        "submit_converter": "Submit converter",
        "request_support": "Request support",
        "report_problem": "Report problem",
        "group": "Group",
        "type": "Type",
        "EndDevice": "End device",
        "Router": "Router",
        "GreenPower": "GreenPower",
        "Unknown": "未知",
        "Coordinator": "Coordinator"
    },
    "scene": {
        "manage_scenes_header": "Manage scenes",
        "add_update_header": "Add/update a scene",
        "scene_id": "Scene ID",
        "recall": "Recall",
        "store": "Store",
        "remove": "Remove",
        "remove_all": "Remove all",
        "add": "Add",
        "select_scene": "Select Scene",
        "scene_name": "Scene Name"
    },
    "stats": {
        "byType": "By device type",
        "byPowerSource": "By power source",
        "byVendor": "By vendor",
        "byModel": "By model",
        "total": "Total"
    },
    "availability": {
        "availability": "Availability",
        "offline": "离线",
        "online": "在线",
        "disabled": "已禁用",
        "enabled": "已启用"
    },
    "devConsole": {
        "generate_external_definition": "Generate external definition",
        "generated_external_definition": "Generated external definition",
        "state_property": "State property",
        "state_property_info": "Set the result into the device's state (only for read)",
        "reset_frontend_state": "Reset frontend state",
        "mqtt": "MQTT",
        "external_converters": "External Converters",
        "external_extensions": "External Extensions",
        "topic": "Topic",
        "send_mqtt": "Send MQTT message",
        "mqtt_topic_info": "Omit the 'base_topic', frontend messages are sent over WebSocket directly to Zigbee2MQTT.",
        "code": "Code",
        "add_update_external_extension": "Add or update external extension",
        "create_new_extension": "Create new extension",
        "select_extension_to_edit": "Select extension to edit",
        "add_update_external_converter": "Add or update external converter",
        "create_new_converter": "Create new converter",
        "select_converter_to_edit": "Select converter to edit",
        "codespace_info": "A Github Codespace is available to help in development",
        "show_definition": "Show definition",
        "hide_definition": "Hide definition"
    },
    "settingsSchemaDescriptions": {
        "Home Assistant integration (MQTT discovery)": "Home Assistant 集成（MQTT 自动发现）",
        "Enable Home Assistant integration": "启用 Home Assistant 集成",
        "Home Assistant discovery topic": "Home Assistant 发现主题",
        "Home Assistant status topic": "Home Assistant 状态主题",
        "Home Assistant legacy actions sensor, when enabled a action sensor will be discoverd and an empty `action` will be send after every published action.": "Home Assistant 传统动作传感器，启用时将发现一个动作传感器，并在每个已发布动作后发送空的 `action`。",
        "Home Assistant experimental event entities, when enabled Zigbee2MQTT will add event entities for exposed actions. The events and attributes are currently deemed experimental and subject to change.": "Home Assistant 实验性事件实体，启用时 Zigbee2MQTT 将为暴露的动作添加事件实体。这些事件和属性目前被认为是实验性的，可能会发生变化。",
        "Checks whether devices are online/offline": "检查设备是否在线/离线",
        "Enable availability checks": "启用可用性检查",
        "Options for active devices (routers/mains powered)": "活跃设备的选项（路由器/电源供电）",
        "Time after which an active device will be marked as offline in minutes": "活跃设备被标记为离线的时间（分钟）",
        "Maximum jitter (in msec) allowed on timeout to avoid availability pings trying to trigger around the same time": "超时允许的最大抖动（毫秒），以避免可用性 ping 尝试在同一时间触发",
        "Enable timeout backoff on failed availability pings (x1.5, x3, x6, x12...)": "在可用性 ping 失败时启用超时退避（x1.5, x3, x6, x12...）",
        "Pause availability pings when backoff reaches over this limit until a new Zigbee message is received from the device. A value of zero disables pausing.": "当退避超过此限制时暂停可用性 ping，直到从设备接收到新的 Zigbee 消息。值为零将禁用暂停。",
        "Options for passive devices (mostly battery powered)": "被动设备的选项（主要是电池供电）",
        "Time after which an passive device will be marked as offline in minutes": "被动设备被标记为离线的时间（分钟）",
        "MQTT base topic for Zigbee2MQTT MQTT messages": "Zigbee2MQTT MQTT 消息的基础主题",
        "MQTT server URL (use mqtts:// for SSL/TLS connection)": "MQTT 服务器 URL（使用 mqtts:// 进行 SSL/TLS 连接）",
        "MQTT keepalive in second": "MQTT 保持连接时间（秒）",
        "Absolute path to SSL/TLS certificate of CA used to sign server and client certificates": "用于签署服务器和客户端证书的 CA 的 SSL/TLS 证书的绝对路径",
        "Absolute path to SSL/TLS key for client-authentication": "用于客户端身份验证的 SSL/TLS 密钥的绝对路径",
        "Absolute path to SSL/TLS certificate for client-authentication": "用于客户端身份验证的 SSL/TLS 证书的绝对路径",
        "MQTT server authentication user": "MQTT 服务器身份验证用户",
        "MQTT server authentication password": "MQTT 服务器身份验证密码",
        "MQTT client ID": "MQTT 客户端 ID",
        "Disable self-signed SSL certificate": "禁用自签名 SSL 证书",
        "Include device information to mqtt messages": "在 MQTT 消息中包含设备信息",
        "MQTT protocol version": "MQTT 协议版本",
        "Disable retain for all send messages. ONLY enable if your MQTT broker doesn't support retained message (e.g. AWS IoT core, Azure IoT Hub, Google Cloud IoT core, IBM Watson IoT Platform). Enabling will break the Home Assistant integration": "禁用所有发送消息的保留。仅当您的 MQTT 代理不支持保留消息时才启用（例如 AWS IoT core, Azure IoT Hub, Google Cloud IoT core, IBM Watson IoT Platform）。启用将破坏 Home Assistant 集成",
        "Specifies the maximum allowed packet length (in bytes) that the server can send to Zigbee2MQTT. NOTE: The same value exists in your MQTT broker but for the length the client can send to it instead.": "指定服务器可以发送到 Zigbee2MQTT 的最大允许数据包长度（字节）。注意：您的 MQTT 代理中存在相同的值，但它是针对客户端可以发送给它的长度。",
        "Location of the adapter. To autodetect the port, set null": "适配器的位置。要自动检测端口，请设置为 null",
        "Disable LED of the adapter if supported": "如果支持，禁用适配器的 LED",
        "Adapter type, not needed unless you are experiencing problems": "适配器类型，除非遇到问题，否则不需要",
        "Baud rate speed for the serial port. This must match what the firmware on your adapter supports (most commonly 115200).": "串行端口的波特率速度。这必须与您的适配器固件支持的速度匹配（最常见的是 115200）。",
        "RTS / CTS Hardware Flow Control for serial port": "串行端口的 RTS / CTS 硬件流控制",
        "Block devices from the network (by ieeeAddr)": "阻止设备从网络中（通过 ieeeAddr）",
        "Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!": "仅允许特定设备加入网络（通过 ieeeAddr）。请注意，所有不在通行名单上的设备都将从网络中移除！",
        "Your device may request a check for a new firmware update. This value determines how frequently third party servers may actually be contacted to look for firmware updates. The value is set in minutes, and the default is 1 day.": "您的设备可能请求检查新的固件更新。此值确定实际联系第三方服务器查找固件更新的频率。值以分钟为单位设置，默认为 1 天。",
        "Zigbee devices may request a firmware update, and do so frequently, causing Zigbee2MQTT to reach out to third party servers. If you disable these device initiated checks, you can still initiate a firmware update check manually.": "Zigbee 设备可能请求固件更新，并且经常这样做，导致 Zigbee2MQTT 联系第三方服务器。如果您禁用这些设备发起的检查，您仍然可以手动启动固件更新检查。",
        "Location of override OTA index file": "覆盖 OTA 索引文件的位置",
        "Limits the rate of requests (in milliseconds) during OTA updates to reduce network congestion. You can increase this value if your network appears unstable during OTA.": "在 OTA 更新期间限制请求速率（毫秒），以减少网络拥塞。如果您的网络在 OTA 期间似乎不稳定，您可以增加此值。",
        "The size of file chunks sent during an update (in bytes). Note: This value may get ignored for manufacturers that require specific values.": "更新期间发送的文件块的大小（字节）。注意：对于需要特定值的制造商，此值可能被忽略。",
        "Enable frontend": "启用前端",
        "Package used for the frontend": "用于前端的包",
        "Frontend binding port. Ignored when using a unix domain socket": "前端绑定端口。使用 unix 域套接字时忽略",
        "Frontend binding host. Binds to a unix socket when an absolute path is given instead.": "前端绑定主机。当给出绝对路径时，绑定到 unix 套接字。",
        "Enables authentication, disabled by default": "启用身份验证，默认禁用",
        "URL on which the frontend can be reached, currently only used for the Home Assistant device configuration page": "可以访问前端的 URL，目前仅用于 Home Assistant 设备配置页面",
        "SSL Certificate file path for exposing HTTPS. The sibling property 'ssl_key' must be set for HTTPS to be activated.": "用于暴露 HTTPS 的 SSL 证书文件路径。必须设置同级属性 'ssl_key' 才能激活 HTTPS。",
        "SSL key file path for exposing HTTPS. The sibling property 'ssl_cert' must be set for HTTPS to be activated.": "用于暴露 HTTPS 的 SSL 密钥文件路径。必须设置同级属性 'ssl_cert' 才能激活 HTTPS。",
        "Base URL for the frontend. If hosted under a subpath, e.g. 'http://localhost:8080/z2m', set this to '/z2m'": "前端的基础 URL。如果在子路径下托管，例如 'http://localhost:8080/z2m'，请将其设置为 '/z2m'",
        "Hide frontend notifications matching specified regex strings. Example: 'z2m: Failed to ping.*'": "隐藏匹配指定正则表达式字符串的前端通知。示例：'z2m: Failed to ping.*'",
        "If true, the frontend UI is not served, only the WebSocket is maintained by Zigbee2MQTT (you are required to serve a standalone UI yourself as needed).": "如果为真，则不提供前端 UI，只有 WebSocket 由 Zigbee2MQTT 维护（您需要根据需要自己提供独立的 UI）。",
        "Log rotation": "日志轮转",
        "Console json log": "控制台 JSON 日志",
        "Create symlink to current logs in the log directory": "在日志目录中创建到当前日志的符号链接",
        "Output location of the log, leave empty to suppress logging": "日志的输出位置，留空以抑制日志记录",
        "Location of log directory": "日志目录的位置",
        "Log file name, can also contain timestamp": "日志文件名，也可以包含时间戳",
        "Logging level": "日志级别",
        "Set individual log levels for certain namespaces": "为特定命名空间设置单独的日志级别",
        "Log debug level to MQTT and frontend (may decrease overall performance)": "将调试级别记录到 MQTT 和前端（可能会降低整体性能）",
        "Do not log these namespaces (regex-based) for debug level": "不记录这些命名空间（基于正则表达式）的调试级别",
        "Number of log directories to keep before deleting the oldest one": "删除最旧日志目录之前要保留的日志目录数量",
        "The host running syslogd, defaults to localhost.": "运行 syslogd 的主机，默认为 localhost。",
        "The port on the host that syslog is running on, defaults to syslogd's default port.": "主机上运行 syslog 的端口，默认为 syslogd 的默认端口。",
        "The network protocol to log over (e.g. tcp4, udp4, tls4, unix, unix-connect, etc).": "要记录的网络协议（例如 tcp4, udp4, tls4, unix, unix-connect 等）。",
        "The path to the syslog dgram socket (i.e. /dev/log or /var/run/syslog for OS X).": "syslog dgram 套接字的路径（即 /dev/log 或 OS X 的 /var/run/syslog）。",
        "PID of the process that log messages are coming from (Default process.pid).": "日志消息来源进程的 PID（默认 process.pid）。",
        "Host to indicate that log messages are coming from (Default: localhost).": "指示日志消息来源的主机（默认：localhost）。",
        "The type of the syslog protocol to use (Default: BSD, also valid: 5424).": "要使用的 syslog 协议类型（默认：BSD，也有效：5424）。",
        "The name of the application (Default: Zigbee2MQTT).": "应用程序的名称（默认：Zigbee2MQTT）。",
        "The end of line character to be added to the end of the message (Default: Message without modifications).": "要添加到消息末尾的行尾字符（默认：消息不作修改）。",
        "ZigBee pan ID, changing requires re-pairing all devices!": "ZigBee PAN ID，更改需要重新配对所有设备！",
        "Zigbee extended pan ID, changing requires re-pairing all devices!": "Zigbee 扩展 PAN ID，更改需要重新配对所有设备！",
        "Zigbee channel, changing might require re-pairing some devices! (Note: use a ZLL channel: 11, 15, 20, or 25 to avoid problems)": "Zigbee 频道，更改可能需要重新配对某些设备！（注意：使用 ZLL 频道：11、15、20 或 25 以避免问题）",
        "Adapter concurrency (e.g. 2 for CC2531 or 16 for CC26X2R1) (default: null, uses recommended value)": "适配器并发性（例如 CC2531 为 2 或 CC26X2R1 为 16）（默认：null，使用推荐值）",
        "Adapter delay": "适配器延迟",
        "MQTT message payload will contain all attributes, not only changed ones. Has to be true when integrating via Home Assistant": "MQTT 消息负载将包含所有属性，而不仅仅是更改的属性。通过 Home Assistant 集成时必须为真",
        "Persist cached state, only used when cache_state: true": "持久化缓存状态，仅在 cache_state: true 时使用",
        "Send cached state on startup, only used when cache_state: true": "启动时发送缓存状态，仅在 cache_state: true 时使用",
        "Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message": "向 MQTT 消息添加 last_seen 属性，包含最后一条 Zigbee 消息的日期/时间",
        "Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg": "向 MQTT 消息添加 elapsed 属性，包含自上一条消息以来的毫秒数",
        "Network encryption key, changing requires re-pairing all devices!": "网络加密密钥，更改需要重新配对所有设备！",
        "Log timestamp format": "日志时间戳格式",
        "Transmit power of adapter, only available for Z-Stack (CC253*/CC2652/CC1352) adapters, CC2652 = 5dbm, CC1352 max is = 20dbm (5dbm default)": "适配器的传输功率，仅适用于 Z-Stack（CC253*/CC2652/CC1352）适配器，CC2652 = 5dbm，CC1352 最大为 = 20dbm（默认 5dbm）",
        "Examples when 'state' of a device is published json: topic: 'zigbee2mqtt/my_bulb' payload '{\"state\": \"ON\"}' attribute: topic 'zigbee2mqtt/my_bulb/state' payload 'ON' attribute_and_json: both json and attribute (see above)": "设备 'state' 发布时的示例 json：主题：'zigbee2mqtt/my_bulb' 负载 '{\"state\": \"ON\"}' 属性：主题 'zigbee2mqtt/my_bulb/state' 负载 'ON' attribute_and_json：json 和属性兼有（见上文）",
        "Periodically check the health of Zigbee2MQTT": "定期检查 Zigbee2MQTT 的健康状况",
        "Interval between checks in minutes": "检查间隔（分钟）",
        "If true, will reset stats every time the health check is executed (only applicable to stats that can be reset).": "如果为真，每次执行健康检查时都会重置统计信息（仅适用于可重置的统计信息）。",
        "Used in the MQTT topic of a device. By default this is the device ID": "用于设备的 MQTT 主题。默认情况下这是设备 ID",
        "Retain MQTT messages of this device": "保留此设备的 MQTT 消息",
        "Disables the device (excludes device from network scans, availability and group state updates)": "禁用设备（从网络扫描、可用性和组状态更新中排除设备）",
        "Sets the MQTT Message Expiry in seconds, Make sure to set mqtt.version to 5": "设置 MQTT 消息过期时间（秒），确保将 mqtt.version 设置为 5",
        "QoS level for MQTT messages of this device": "此设备 MQTT 消息的 QoS 级别",
        "The minimum time between payloads in seconds. Payloads received whilst the device is being throttled will be discarded": "负载之间的最小时间（秒）。设备被限制时接收的负载将被丢弃",
        "Debounces messages of this device": "此设备的消息去抖动",
        "Protects unique payload values of specified payload properties from overriding within debounce time": "保护指定负载属性的唯一负载值在去抖动时间内不被覆盖",
        "Publish optimistic state after set": "设置后发布乐观状态",
        "Filter attributes with regex from published payload.": "使用正则表达式从已发布的负载中过滤属性。",
        "Filter attributes with regex from being added to the cache, this prevents the attribute from being in the published payload when the value didn't change.": "使用正则表达式过滤属性，防止其被添加到缓存中，这可以防止在值未更改时属性出现在已发布的负载中。",
        "Filter attributes with regex from optimistic publish payload when calling /set. (This has no effect if optimistic is set to false).": "调用 /set 时使用正则表达式从乐观发布负载中过滤属性。（如果 optimistic 设置为 false，这不起作用）。",
        "The user-defined device icon for the frontend. It can be a full URL link to an image (e.g. https://SOME.SITE/MODEL123.jpg) or a path to a local file inside the `device_icons` directory (e.g. device_icons/MODEL123.png).": "前端的用户定义设备图标。它可以是图像的完整 URL 链接（例如 https://SOME.SITE/MODEL123.jpg）或 `device_icons` 目录内本地文件的路径（例如 device_icons/MODEL123.png）。",
        "Name of the device in Home Assistant": "设备在 Home Assistant 中的名称",
        "QoS level for MQTT messages of this group": "此组 MQTT 消息的 QoS 级别",
        "Control when to publish state OFF or CLOSE for a group. 'all_members_off': only publish state OFF/CLOSE when all group members are in state OFF/CLOSE,  'last_member_state': publish state OFF whenever one of its members changes to OFF": "控制何时为组发布状态 OFF 或 CLOSE。'all_members_off'：仅当所有组成员都处于 OFF/CLOSE 状态时才发布状态 OFF/CLOSE，'last_member_state'：每当其成员之一更改为 OFF 时就发布状态 OFF"
    }
}
